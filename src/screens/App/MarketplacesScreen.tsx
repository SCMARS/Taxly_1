import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Animated,
  SafeAreaView,
  TextInput,
  Alert,
  Switch,
  Dimensions,
} from "react-native";
import { Button } from "../../components/Button";
import { mockMarketplaces } from "../../services/mockData";

const { width } = Dimensions.get("window");

interface MarketplacesScreenProps {
  navigation: any;
}

export const MarketplacesScreen: React.FC<MarketplacesScreenProps> = ({ navigation }) => {
  const [marketplaces, setMarketplaces] = useState(mockMarketplaces);
  const [fadeAnim] = useState(new Animated.Value(0));
  const [slideAnim] = useState(new Animated.Value(30));

  useEffect(() => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 800,
        useNativeDriver: true,
      }),
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 800,
        useNativeDriver: true,
      }),
    ]).start();
  }, []);

  const handleConnectMarketplace = (marketplaceId: string) => {
    const marketplace = marketplaces.find(m => m.id === marketplaceId);
    if (marketplace) {
      Alert.prompt(
        `–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ${marketplace.name}`,
        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à API –∫–ª—é—á:",
        [
          { text: "–°–∫–∞—Å—É–≤–∞—Ç–∏", style: "cancel" },
          { 
            text: "–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏", 
            onPress: (apiKey) => {
              if (apiKey) {
                const updatedMarketplaces = marketplaces.map(m => 
                  m.id === marketplaceId 
                    ? { ...m, apiKey, isConnected: true, lastSync: new Date().toISOString() }
                    : m
                );
                setMarketplaces(updatedMarketplaces);
                Alert.alert("–£—Å–ø—ñ—Ö", `${marketplace.name} —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!`);
              }
            }
          }
        ]
      );
    }
  };

  const handleDisconnectMarketplace = (marketplaceId: string) => {
    const marketplace = marketplaces.find(m => m.id === marketplaceId);
    Alert.alert(
      "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
      `–í—ñ–¥–∫–ª—é—á–∏—Ç–∏ ${marketplace?.name}?`,
      [
        { text: "–°–∫–∞—Å—É–≤–∞—Ç–∏", style: "cancel" },
        { 
          text: "–í—ñ–¥–∫–ª—é—á–∏—Ç–∏", 
          onPress: () => {
            const updatedMarketplaces = marketplaces.map(m => 
              m.id === marketplaceId 
                ? { ...m, apiKey: undefined, isConnected: false, lastSync: undefined }
                : m
            );
            setMarketplaces(updatedMarketplaces);
            Alert.alert("–£—Å–ø—ñ—Ö", `${marketplace?.name} –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ`);
          }
        }
      ]
    );
  };

  const handleSyncMarketplace = (marketplaceId: string) => {
    const marketplace = marketplaces.find(m => m.id === marketplaceId);
    Alert.alert(
      "–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è",
      `–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∑ ${marketplace?.name}?`,
      [
        { text: "–°–∫–∞—Å—É–≤–∞—Ç–∏", style: "cancel" },
        { 
          text: "–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏", 
          onPress: () => {
            // –°–∏–º—É–ª—è—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            setTimeout(() => {
              const updatedMarketplaces = marketplaces.map(m => 
                m.id === marketplaceId 
                  ? { ...m, lastSync: new Date().toISOString() }
                  : m
              );
              setMarketplaces(updatedMarketplaces);
              Alert.alert("–£—Å–ø—ñ—Ö", `–î–∞–Ω—ñ –∑ ${marketplace?.name} —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ!`);
            }, 2000);
          }
        }
      ]
    );
  };

  const handleManualUpload = () => {
    navigation.navigate("ManualUpload");
  };

  const getMarketplaceIcon = (name: string) => {
    switch (name) {
      case 'Rozetka': return 'üõí';
      case 'Prom': return 'üì±';
      case 'OLX': return 'üìã';
      case 'Kasta': return 'üéØ';
      case 'Amazon': return 'üì¶';
      default: return 'üè™';
    }
  };

  const getConnectionStatus = (isConnected: boolean) => {
    return isConnected ? "–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ" : "–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ";
  };

  const getConnectionColor = (isConnected: boolean) => {
    return isConnected ? "#50C878" : "#FF6B6B";
  };

  const formatLastSync = (lastSync?: string) => {
    if (!lastSync) return "–ù—ñ–∫–æ–ª–∏";
    const date = new Date(lastSync);
    return date.toLocaleDateString('uk-UA', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const getConnectedCount = () => {
    return marketplaces.filter(m => m.isConnected).length;
  };

  const getTotalMarketplaces = () => marketplaces.length;

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        <Animated.View
          style={[
            styles.header,
            {
              opacity: fadeAnim,
              transform: [{ translateY: slideAnim }],
            },
          ]}
        >
          <Text style={styles.title}>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∏</Text>
          <Text style={styles.subtitle}>
            –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –∑ —Ç–æ—Ä–≥–æ–≤–∏–º–∏ –º–∞–π–¥–∞–Ω—á–∏–∫–∞–º–∏
          </Text>
        </Animated.View>

        <ScrollView
          style={styles.content}
          showsVerticalScrollIndicator={false}
          contentContainerStyle={styles.scrollContent}
        >
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω—å */}
          <Animated.View
            style={[
              styles.statsSection,
              {
                opacity: fadeAnim,
                transform: [{ translateY: slideAnim }],
              },
            ]}
          >
            <Text style={styles.sectionTitle}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω—å</Text>
            <View style={styles.statsGrid}>
              <View style={styles.statCard}>
                <Text style={styles.statIcon}>üîó</Text>
                <Text style={styles.statNumber}>{getConnectedCount()}</Text>
                <Text style={styles.statLabel}>–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ</Text>
              </View>
              <View style={styles.statCard}>
                <Text style={styles.statIcon}>üìä</Text>
                <Text style={styles.statNumber}>{getTotalMarketplaces()}</Text>
                <Text style={styles.statLabel}>–í—Å—å–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ</Text>
              </View>
              <View style={styles.statCard}>
                <Text style={styles.statIcon}>‚è∞</Text>
                <Text style={styles.statNumber}>
                  {marketplaces.filter(m => m.isConnected && m.lastSync).length}
                </Text>
                <Text style={styles.statLabel}>–ê–∫—Ç–∏–≤–Ω–∏—Ö</Text>
              </View>
              <View style={styles.statCard}>
                <Text style={styles.statIcon}>üìà</Text>
                <Text style={styles.statNumber}>
                  {Math.round((getConnectedCount() / getTotalMarketplaces()) * 100)}%
                </Text>
                <Text style={styles.statLabel}>–ü–æ–∫—Ä–∏—Ç—Ç—è</Text>
              </View>
            </View>
          </Animated.View>

          {/* –°–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ */}
          <Animated.View
            style={[
              styles.marketplacesSection,
              {
                opacity: fadeAnim,
                transform: [{ translateY: slideAnim }],
              },
            ]}
          >
            <Text style={styles.sectionTitle}>–î–æ—Å—Ç—É–ø–Ω—ñ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∏</Text>
            {marketplaces.map((marketplace, index) => (
              <Animated.View
                key={marketplace.id}
                style={[
                  styles.marketplaceCard,
                  {
                    opacity: fadeAnim,
                    transform: [
                      {
                        translateY: slideAnim.interpolate({
                          inputRange: [0, 1],
                          outputRange: [30 + index * 20, 0],
                        }),
                      },
                    ],
                  },
                ]}
              >
                <View style={styles.marketplaceHeader}>
                  <View style={styles.marketplaceInfo}>
                    <Text style={styles.marketplaceIcon}>
                      {getMarketplaceIcon(marketplace.name)}
                    </Text>
                    <View style={styles.marketplaceDetails}>
                      <Text style={styles.marketplaceName}>{marketplace.name}</Text>
                      <Text style={styles.marketplaceType}>
                        {marketplace.type === 'api' ? 'API —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è' : '–†—É—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è'}
                      </Text>
                    </View>
                  </View>
                  <View style={styles.marketplaceStatus}>
                    <Text style={[
                      styles.statusText,
                      { color: getConnectionColor(marketplace.isConnected) }
                    ]}>
                      {getConnectionStatus(marketplace.isConnected)}
                    </Text>
                  </View>
                </View>

                {marketplace.isConnected && (
                  <View style={styles.connectionDetails}>
                    <Text style={styles.lastSyncText}>
                      –û—Å—Ç–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: {formatLastSync(marketplace.lastSync)}
                    </Text>
                    <Text style={styles.apiKeyText}>
                      API –∫–ª—é—á: {marketplace.apiKey ? '***' + marketplace.apiKey.slice(-4) : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
                    </Text>
                  </View>
                )}

                <View style={styles.marketplaceActions}>
                  {!marketplace.isConnected ? (
                    <Button
                      title="–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏"
                      onPress={() => handleConnectMarketplace(marketplace.id)}
                      style={styles.actionButton}
                      variant="primary"
                    />
                  ) : (
                    <>
                      <Button
                        title="–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏"
                        onPress={() => handleSyncMarketplace(marketplace.id)}
                        style={styles.actionButton}
                        variant="primary"
                      />
                      <Button
                        title="–í—ñ–¥–∫–ª—é—á–∏—Ç–∏"
                        onPress={() => handleDisconnectMarketplace(marketplace.id)}
                        style={styles.actionButton}
                        variant="secondary"
                      />
                    </>
                  )}
                </View>
              </Animated.View>
            ))}
          </Animated.View>

          {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó */}
          <Animated.View
            style={[
              styles.syncSettings,
              {
                opacity: fadeAnim,
                transform: [{ translateY: slideAnim }],
              },
            ]}
          >
            <Text style={styles.sectionTitle}>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó</Text>
            <View style={styles.settingItem}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingTitle}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è</Text>
                <Text style={styles.settingDescription}>
                  –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω
                </Text>
              </View>
              <Switch
                value={true}
                onValueChange={() => {}}
                trackColor={{ false: "#333", true: "#4A90E2" }}
                thumbColor="#FFFFFF"
              />
            </View>
            <View style={styles.settingItem}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingTitle}>Push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è</Text>
                <Text style={styles.settingDescription}>
                  –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                </Text>
              </View>
              <Switch
                value={true}
                onValueChange={() => {}}
                trackColor={{ false: "#333", true: "#4A90E2" }}
                thumbColor="#FFFFFF"
              />
            </View>
            <View style={styles.settingItem}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingTitle}>–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó</Text>
                <Text style={styles.settingDescription}>
                  –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ–π –ø—Ä–æ—Ç—è–≥–æ–º 90 –¥–Ω—ñ–≤
                </Text>
              </View>
              <Switch
                value={true}
                onValueChange={() => {}}
                trackColor={{ false: "#333", true: "#4A90E2" }}
                thumbColor="#FFFFFF"
              />
            </View>
          </Animated.View>

          {/* –†—É—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
          <Animated.View
            style={[
              styles.manualUpload,
              {
                opacity: fadeAnim,
                transform: [{ translateY: slideAnim }],
              },
            ]}
          >
            <Text style={styles.sectionTitle}>üìÅ –†—É—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</Text>
            <View style={styles.manualUploadCard}>
              <Text style={styles.manualUploadText}>
                –Ø–∫—â–æ —É –≤–∞—Å –Ω–µ–º–∞—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ API, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ CSV –∞–±–æ Excel —Ñ–∞–π–ª–∏.
              </Text>
              <Button
                title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª"
                onPress={handleManualUpload}
                style={styles.uploadButton}
                variant="primary"
              />
              <Text style={styles.uploadNote}>
                –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç–∏: .csv, .xlsx, .xls
              </Text>
            </View>
          </Animated.View>

          {/* –®–≤–∏–¥–∫—ñ –¥—ñ—ó */}
          <Animated.View
            style={[
              styles.quickActions,
              {
                opacity: fadeAnim,
                transform: [{ translateY: slideAnim }],
              },
            ]}
          >
            <Text style={styles.sectionTitle}>–®–≤–∏–¥–∫—ñ –¥—ñ—ó</Text>
            <Button
              title="–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –≤—Å—ñ"
              onPress={() => {
                const connectedMarketplaces = marketplaces.filter(m => m.isConnected);
                if (connectedMarketplaces.length === 0) {
                  Alert.alert("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤");
                  return;
                }
                Alert.alert(
                  "–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è",
                  `–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ ${connectedMarketplaces.length} –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤?`,
                  [
                    { text: "–°–∫–∞—Å—É–≤–∞—Ç–∏", style: "cancel" },
                    { 
                      text: "–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏", 
                      onPress: () => {
                        Alert.alert("–£—Å–ø—ñ—Ö", "–í—Å—ñ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ!");
                      }
                    }
                  ]
                );
              }}
              style={styles.quickActionButton}
              variant="primary"
            />
            <Button
              title="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API"
              onPress={() => navigation.navigate("APISettings")}
              style={styles.quickActionButton}
              variant="secondary"
            />
            <Button
              title="–Ü—Å—Ç–æ—Ä—ñ—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ–π"
              onPress={() => navigation.navigate("SyncHistory")}
              style={styles.quickActionButton}
              variant="secondary"
            />
          </Animated.View>
        </ScrollView>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: "#000000",
  },
  container: {
    flex: 1,
    backgroundColor: "#000000",
  },
  header: {
    backgroundColor: "#000000",
    paddingTop: 20,
    paddingBottom: 20,
    paddingHorizontal: 20,
    borderBottomWidth: 1,
    borderBottomColor: "#333",
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#FFFFFF",
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: "#999",
    lineHeight: 22,
  },
  content: {
    flex: 1,
  },
  scrollContent: {
    padding: 20,
    paddingBottom: 40,
  },
  statsSection: {
    marginBottom: 30,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#FFFFFF",
    marginBottom: 16,
  },
  statsGrid: {
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "space-between",
    gap: 16,
  },
  statCard: {
    width: (width - 60) / 2,
    backgroundColor: "#111",
    padding: 20,
    borderRadius: 16,
    alignItems: "center",
    minHeight: 120,
    justifyContent: "center",
  },
  statIcon: {
    fontSize: 32,
    marginBottom: 12,
  },
  statNumber: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#4A90E2",
    marginBottom: 8,
    textAlign: "center",
  },
  statLabel: {
    fontSize: 12,
    color: "#999",
    textAlign: "center",
    lineHeight: 16,
  },
  marketplacesSection: {
    marginBottom: 30,
  },
  marketplaceCard: {
    backgroundColor: "#111",
    padding: 20,
    borderRadius: 16,
    marginBottom: 16,
  },
  marketplaceHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 16,
  },
  marketplaceInfo: {
    flexDirection: "row",
    alignItems: "center",
    flex: 1,
  },
  marketplaceIcon: {
    fontSize: 32,
    marginRight: 16,
  },
  marketplaceDetails: {
    flex: 1,
  },
  marketplaceName: {
    fontSize: 18,
    color: "#FFFFFF",
    fontWeight: "600",
    marginBottom: 4,
  },
  marketplaceType: {
    fontSize: 14,
    color: "#999",
  },
  marketplaceStatus: {
    alignItems: "flex-end",
  },
  statusText: {
    fontSize: 14,
    fontWeight: "600",
  },
  connectionDetails: {
    backgroundColor: "#222",
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
  },
  lastSyncText: {
    fontSize: 14,
    color: "#FFFFFF",
    marginBottom: 8,
  },
  apiKeyText: {
    fontSize: 14,
    color: "#999",
  },
  marketplaceActions: {
    flexDirection: "row",
    gap: 12,
  },
  actionButton: {
    flex: 1,
  },
  syncSettings: {
    marginBottom: 30,
  },
  settingItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    backgroundColor: "#111",
    padding: 20,
    borderRadius: 16,
    marginBottom: 16,
  },
  settingInfo: {
    flex: 1,
    marginRight: 16,
  },
  settingTitle: {
    fontSize: 16,
    color: "#FFFFFF",
    fontWeight: "600",
    marginBottom: 4,
  },
  settingDescription: {
    fontSize: 14,
    color: "#999",
    lineHeight: 20,
  },
  manualUpload: {
    marginBottom: 30,
  },
  manualUploadCard: {
    backgroundColor: "#111",
    padding: 20,
    borderRadius: 16,
    alignItems: "center",
  },
  manualUploadText: {
    fontSize: 16,
    color: "#FFFFFF",
    textAlign: "center",
    lineHeight: 22,
    marginBottom: 20,
  },
  uploadButton: {
    marginBottom: 16,
    minWidth: 200,
  },
  uploadNote: {
    fontSize: 14,
    color: "#999",
    textAlign: "center",
  },
  quickActions: {
    marginBottom: 30,
  },
  quickActionButton: {
    marginBottom: 12,
  },
}); 